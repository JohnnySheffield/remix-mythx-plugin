{"version":3,"sources":["_constants/user.constants.js","_constants/analysis.constants.js","config/config.js","_helpers/auth-header.js","_services/mythxService.js","_actions/user.actions.js","_actions/analysis.actions.js","Login/MythXLogin.js","_reducers/authentication.reducer.js","_reducers/analysis.reducer.js","_reducers/index.js","_sagas/checkAnalysisStatus.saga.js","_sagas/jwt.saga.js","_sagas/index.js","_helpers/store.js","Verification/MythXVerification.js","App.js","serviceWorker.js","index.js"],"names":["userConstants","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REFRESH_REQUEST","REFRESH_SUCCESS","REFRESH_FAILURE","LOGOUT","analysisConstants","ANALYSIS_SUBMIT_REQUEST","ANALYSIS_SUBMIT_SUCCESS","ANALYSIS_SUBMIT_FAILURE","ANALYSIS_STATUS_REQUEST","ANALYSIS_STATUS_SUCCESS","ANALYSIS_STATUS_FAILURE","ANALYSIS_REPORT_REQUEST","ANALYSIS_REPORT_SUCCESS","ANALYSIS_REPORT_FAILURE","config","MythX","apiUrl","Remix","trustedOrigins","authHeader","user","JSON","parse","localStorage","getItem","auth","access","Authorization","mythxService","login","address","password","requestOptions","method","headers","Content-Type","body","stringify","ethAddress","fetch","concat","then","handleResponse","setItem","refreshToken","accessToken","logout","getAnalysationStatus","uuid","Object","objectSpread","getAnalysationReport","submitContractsForAnalysation","contractFiles","sources","requestData","contractFile","hasOwnProperty","contractsList","contractName","keys","contract","bytecode","evm","object","deployedBytecode","sourceMap","deployedSourceMap","entries","reduce","result","item","source","content","sourceList","version","metadata","compiler","analysisMode","requests","push","createAnalysisRequest","Promise","all","removeItem","ignore","data","response","text","ignored","ok","status","window","location","reload","reject","error","message","statusText","userActions","dispatch","type","success","failure","toString","analysisActions","analyzeContracts","contracts","payload","catch","MythxLogin","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","target","name","setState","defineProperty","value","handleSubmit","preventDefault","state","handleLogout","loggedIn","react_default","a","createElement","onClick","onSubmit","rel","href","placeholder","onChange","React","Component","connectedLogin","connect","authentication","initialState","loggingIn","reports","isSubmitting","isRequestingReport","polling","rootReducer","combineReducers","arguments","length","undefined","action","refreshing","analysis","newState","report","checkAnalysisStatuses","checkAnalysisStatus","getAnalysisReport","watchAnalysisSubmission","delay","ms","resolve","setTimeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","request","regenerator_default","wrap","_context","prev","next","Symbol","iterator","done","spawn","t0","return","finish","stop","_marked","_context2","put","sent","abrupt","_marked2","_context3","_marked3","_context4","takeEvery","_marked4","watchAuthExpiry","refresh","jwt_saga_marked","jwt_saga_marked2","rootSaga","_sagas_marked","loggerMiddleware","createLogger","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","run","MythXVerification","handleMessage","indexOf","origin","_JSON$parse","key","issues","issueList","issue","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","locations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","sourceFile","title","description","head","severity","tail","lineColumnPos","filePath","err","map","_this2","isLoggedIn","react_event_listener_cjs_default","onMessage","renderIssues","connectedMythixVerification","App","es","className","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.178cc230.chunk.js","sourcesContent":["export const userConstants = {\n  LOGIN_REQUEST: 'USER_LOGIN_REQUEST',\n  LOGIN_SUCCESS: 'USER_LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'USER_LOGIN_FAILURE',\n\n  REFRESH_REQUEST: 'USER_REFRESH_REQUEST',\n  REFRESH_SUCCESS: 'USER_REFRESH_SUCCESS',\n  REFRESH_FAILURE: 'USER_REFRESH_FAILURE',\n\n  LOGOUT: 'USER_LOGOUT',\n}\n","export const analysisConstants = {\n  ANALYSIS_SUBMIT_REQUEST: 'CONTRACT_ANALYSIS_SUBMIT_REQUEST',\n  ANALYSIS_SUBMIT_SUCCESS: 'CONTRACT_ANALYSIS_SUBMIT_SUCCESS',\n  ANALYSIS_SUBMIT_FAILURE: 'CONTRACT_ANALYSIS_SUBMIT_FAILURE',\n\n  ANALYSIS_STATUS_REQUEST: 'CONTRACT_ANALYSIS_STATUS_REQUEST',\n  ANALYSIS_STATUS_SUCCESS: 'CONTRACT_ANALYSIS_STATUS_SUCCESS',\n  ANALYSIS_STATUS_FAILURE: 'CONTRACT_ANALYSIS_STATUS_FAILURE',\n\n  ANALYSIS_REPORT_REQUEST: 'CONTRACT_ANALYSIS_REPORT_REQUEST',\n  ANALYSIS_REPORT_SUCCESS: 'CONTRACT_ANALYSIS_REPORT_SUCCESS',\n  ANALYSIS_REPORT_FAILURE: 'CONTRACT_ANALYSIS_REPORT_FAILURE',\n}\n","export default {\n  MythX: {\n    apiUrl: 'https://api.mythx.io/v1'\n  },\n  Remix: {\n    trustedOrigins: [\n      \"http://remix-alpha.ethereum.org\",\n      \"http://remix.ethereum.org\",\n      \"https://remix-alpha.ethereum.org\",\n      \"https://remix.ethereum.org\"\n    ]\n  }\n}\n","export function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.auth.access) {\n    return { 'Authorization': 'Bearer ' + user.auth.access };\n  } else {\n    return {};\n  }\n}\n","import config from '../config/config'\nimport { authHeader } from '../_helpers/auth-header'\n\nexport const mythxService = {\n  login,\n  refreshToken,\n  logout,\n  getAnalysationStatus,\n  getAnalysationReport,\n  submitContractsForAnalysation\n}\n\nfunction login (address, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({ethAddress: address, password})\n  }\n\n  const user = {\n    address\n  }\n\n  return fetch(`${config.MythX.apiUrl}/auth/login`, requestOptions)\n    .then(handleResponse)\n    .then(auth => {\n      user.auth = auth\n      // store user details and jwt token in local storage to keep user logged\n      // in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user))\n      return user\n    })\n}\n\nfunction refreshToken(accessToken, refreshToken) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({accessToken, refreshToken})\n  }\n\n  return fetch(`${config.MythX.apiUrl}/auth/refresh`, requestOptions)\n    .then(handleResponse)\n    .then(auth => {\n      const user = JSON.parse(localStorage.getItem('user') || \"{}\")\n      user.auth = auth\n      // store user details and jwt token in local storage to keep user logged\n      // in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user))\n      return user\n    })\n}\n\nfunction logout () {\n  // remove user from local storage to log user out\n  try {\n    localStorage.removeItem('user')\n  } catch (ignore) {\n\n  }\n}\n\nfunction submitContractsForAnalysation (contractFiles, sources) {\n  const requestData = {}\n  for (let contractFile in contractFiles) {\n    if (contractFiles.hasOwnProperty(contractFile)) {\n      const contractsList = contractFiles[contractFile]\n      const contractName = Object.keys(contractsList)[0]\n      const contract = contractsList[contractName]\n      requestData[contractFile] = {\n        contractName,\n        bytecode: contract.evm.bytecode.object,\n        deployedBytecode: contract.evm.deployedBytecode.object,\n        sourceMap: contract.evm.bytecode.sourceMap,\n        deployedSourceMap: contract.evm.deployedBytecode.sourceMap,\n        sources: Object.entries(sources).reduce((result, item) => {\n          result[item[0]] = {\n            source: item[1].content\n          }\n          return result\n        }, {}),\n        sourceList: Object.keys(sources),\n        version: JSON.parse(contract.metadata).compiler.version,\n        analysisMode: 'quick'\n      }\n    }\n  }\n  const requests = []\n  for (const contractFile in requestData) {\n    if (requestData.hasOwnProperty(contractFile)) {\n      requests.push(createAnalysisRequest(requestData[contractFile]))\n    }\n  }\n  return Promise.all(requests);\n}\n\nfunction getAnalysationStatus (uuid) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader()\n    }\n  }\n  return fetch(`${config.MythX.apiUrl}/analyses/${uuid}`, requestOptions)\n    .then(handleResponse)\n}\n\nfunction getAnalysationReport (uuid) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader()\n    }\n  }\n  return fetch(`${config.MythX.apiUrl}/analyses/${uuid}/issues`, requestOptions)\n    .then(handleResponse)\n}\n\nfunction createAnalysisRequest (data) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader()\n    },\n    body: JSON.stringify({data})\n  }\n  return fetch(`${config.MythX.apiUrl}/analyses`, requestOptions)\n    .then(handleResponse)\n}\n\nfunction handleResponse (response) {\n  return response.text().then(text => {\n    let data = {}\n    try {\n      data = text && JSON.parse(text)\n    } catch (ignored) {\n\n    }\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout()\n        window.location.reload(true)\n        return Promise.reject('Unauthorized')\n      }\n\n      const error = (data && data.message) || response.statusText\n      return Promise.reject(error)\n    }\n\n    return data\n  })\n}\n","import { userConstants } from '../_constants'\nimport { mythxService } from '../_services/index'\n\nexport const userActions = {\n  login,\n  logout\n}\n\nfunction login (address, password) {\n\n  return dispatch => {\n    dispatch(request({address}))\n\n    mythxService.login(address, password)\n      .then(\n        user => {\n          dispatch(success(user))\n        },\n        error => {\n          dispatch(failure(error.toString()))\n        }\n      )\n\n  }\n\n  function request (user) {return {type: userConstants.LOGIN_REQUEST, user}}\n\n  function success (user) {return {type: userConstants.LOGIN_SUCCESS, user}}\n\n  function failure (error) {return {type: userConstants.LOGIN_FAILURE, error}}\n}\n\n\nfunction logout() {\n  mythxService.logout();\n  return { type: userConstants.LOGOUT };\n}\n\n","import { analysisConstants } from '../_constants'\nimport { mythxService } from '../_services'\n\nexport const analysisActions = {\n  analyzeContracts\n}\n\nfunction analyzeContracts (contracts, source) {\n\n  return dispatch => {\n    dispatch(request())\n\n    mythxService.submitContractsForAnalysation(contracts, source)\n      .then(requests => {\n        return dispatch({\n          type: analysisConstants.ANALYSIS_SUBMIT_SUCCESS,\n          payload: requests\n        });\n      })\n      .catch(error => {\n        return dispatch(failure(error.toString()))\n      })\n\n    function request () {return {type: analysisConstants.ANALYSIS_SUBMIT_REQUEST}}\n\n    function failure (error) {\n      return {\n        type: analysisConstants.ANALYSIS_SUBMIT_FAILURE,\n        error\n      }\n    }\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { userActions } from '../_actions'\n\nclass MythxLogin extends React.Component {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      address: '',\n      password: ''\n    }\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target\n    const name = target.name\n\n    this.setState({\n      [name]: target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.dispatch(userActions.login(this.state.address, this.state.password))\n  }\n\n  handleLogout = () => {\n    this.props.dispatch(userActions.logout())\n  }\n\n  render () {\n    if (this.props.loggedIn) return (\n      <p>Logged in as {this.props.user.address}! &nbsp;\n        <button onClick={this.handleLogout}>Logout!</button>\n      </p>\n    )\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n        <p>Verify security of your smart contract on complilation. Sign up for a\n          free account on&nbsp;\n          <a target=\"_blank\" rel=\"noopener noreferrer\"\n             href=\"https://mythx.io\">https://mythx.io</a>\n        </p>\n        <p>\n          <label>MythiX address</label><br/>\n          <input\n            type=\"text\"\n            placeholder=\"0x123...\"\n            value={this.state.address}\n            onChange={this.handleInputChange}\n            name=\"address\"\n          />\n        </p>\n\n        <p>\n          <label>MythiX password</label><br/>\n          <input\n            type=\"password\"\n            placeholder=\"super secret password\"\n            value={this.state.password}\n            onChange={this.handleInputChange}\n            name=\"password\"\n          />\n        </p>\n\n        <p>\n          <input type=\"submit\" value=\"Activate\"/>\n        </p>\n      </form>\n    )\n  }\n\n}\n\nfunction mapStateToProps (state) {\n  const {authentication} = state\n  const {loggedIn, user} = authentication\n  return {\n    loggedIn,\n    user\n  }\n}\n\nconst connectedLogin = connect(mapStateToProps)(MythxLogin)\nexport { connectedLogin as MythxLogin }\n","import { userConstants } from '../_constants';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? { loggedIn: true, user } : { loggedIn: false, loggingIn: false, user: {}};\n\nexport function authentication(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        ...state,\n        loggingIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggingIn: false,\n        loggedIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {\n        ...state,\n        loggingIn: false,\n        loggedIn: false,\n        user: {},\n      };\n    case userConstants.REFRESH_REQUEST:\n      return {\n        refreshing: true,\n        user: action.user\n      };\n    case userConstants.REFRESH_SUCCESS:\n      return {\n        ...state,\n        refreshing: false,\n        loggedIn: true,\n        user: action.user\n      };\n    case userConstants.REFRESH_FAILURE:\n      return {\n        ...state,\n        refreshing: false,\n        loggedIn: false,\n        user: {},\n      };\n    case userConstants.LOGOUT:\n      return {\n        loggingIn: false,\n        loggedIn: false,\n        user: {},\n      };\n    default:\n      return state\n  }\n}\n","import { analysisConstants } from '../_constants'\n\nconst initialState = {reports: {}, isSubmitting: false, isRequestingReport: false, polling: {}}\n\nexport function analysis (state = initialState, action) {\n  switch (action.type) {\n    case analysisConstants.ANALYSIS_SUBMIT_REQUEST:\n      return {\n        ...state,\n        isSubmitting: true\n      }\n    case analysisConstants.ANALYSIS_SUBMIT_SUCCESS:\n      return {\n        ...state,\n        isSubmitting: false,\n        requests: action.requests\n      }\n    case analysisConstants.ANALYSIS_SUBMIT_FAILURE:\n      return {\n        ...state,\n        isSubmitting: false\n      }\n    case analysisConstants.ANALYSIS_STATUS_REQUEST: {\n      const newState = state\n      newState.polling = {\n        ...newState.polling,\n        [action.uuid]: true\n      }\n      return newState\n    }\n    case analysisConstants.ANALYSIS_STATUS_SUCCESS: {\n      state.polling = {\n        ...state.polling,\n        [action.uuid]: false\n      }\n      return {\n        ...state\n      }\n    }\n    case analysisConstants.ANALYSIS_STATUS_FAILURE: {\n      state.polling = {\n        ...state.polling,\n        [action.uuid]: false\n      }\n      return {\n        ...state\n      }\n    }\n    case analysisConstants.ANALYSIS_REPORT_REQUEST:\n      return {\n        ...state,\n        isRequestingReport: true\n      }\n    case analysisConstants.ANALYSIS_REPORT_SUCCESS: {\n      state.reports = {\n        ...state.reports,\n        [action.uuid]: action.report\n      }\n      return {\n        ...state,\n        isRequestingReport: false\n      }\n    }\n    case analysisConstants.ANALYSIS_REPORT_FAILURE: {\n      state.reports = {\n        ...state.reports,\n        [action.uuid]: null\n      }\n      return {\n        ...state,\n        isRequestingReport: false\n      }\n    }\n    default:\n      return state\n  }\n}\n","\nimport { combineReducers } from 'redux';\n\nimport { authentication } from './authentication.reducer';\nimport { analysis } from './analysis.reducer';\n\nconst rootReducer = combineReducers({\n  authentication,\n  analysis\n});\n\nexport default rootReducer;\n","import { call, put, spawn, takeEvery } from 'redux-saga/effects'\nimport { analysisConstants } from '../_constants'\nimport { mythxService } from '../_services'\n\nconst delay = (ms) => {\n  return new Promise(resolve => setTimeout(() => resolve(true), ms))\n}\n\nfunction * checkAnalysisStatuses (action) {\n  for (const request of action.payload) {\n    yield spawn(checkAnalysisStatus, request)\n  }\n}\n\nfunction * checkAnalysisStatus (request) {\n  yield put({\n    type: analysisConstants.ANALYSIS_STATUS_REQUEST,\n    uuid: request.uuid\n  })\n\n  try {\n    const response = yield call(mythxService.getAnalysationStatus, request.uuid)\n    if (response.status === 'Finished') {\n      yield put({\n        type: analysisConstants.ANALYSIS_STATUS_SUCCESS,\n        uuid: request.uuid\n      })\n      return yield call(getAnalysisReport, request.uuid)\n    }\n    if (response.status === 'Error') {\n      return yield put({\n        type: analysisConstants.ANALYSIS_REPORT_FAILURE,\n        error: response.error,\n        uuid: request.uuid\n      })\n    }\n    yield call(delay, 2000)\n    return yield call(checkAnalysisStatus, request)\n  } catch (e) {\n    yield put({type: analysisConstants.ANALYSIS_STATUS_FAILURE, error: e})\n    yield call(delay, 2000)\n    return yield call(checkAnalysisStatus, request)\n  }\n}\n\nfunction * getAnalysisReport (uuid) {\n  yield put({type: analysisConstants.ANALYSIS_REPORT_REQUEST})\n  try {\n    const response = yield call(mythxService.getAnalysationReport, uuid)\n    yield put({\n      type: analysisConstants.ANALYSIS_REPORT_SUCCESS,\n      uuid,\n      report: response\n    })\n  } catch (e) {\n    yield put({\n      type: analysisConstants.ANALYSIS_REPORT_FAILURE,\n      uuid,\n      error: e\n    })\n  }\n}\n\nexport function * watchAnalysisSubmission () {\n  yield takeEvery(analysisConstants.ANALYSIS_SUBMIT_SUCCESS, checkAnalysisStatuses)\n}\n","import { call, put, takeEvery } from 'redux-saga/effects'\nimport { userConstants } from '../_constants'\nimport { mythxService } from '../_services'\n\nconst delay = (ms) => {\n  return new Promise(resolve => setTimeout(() => resolve(true), ms))\n}\n\nfunction * refreshToken (action) {\n  yield call(delay, 60 * 1000)\n  yield put({type: userConstants.REFRESH_REQUEST})\n  try {\n    const user = yield call(mythxService.refreshToken, action.user.auth.access, action.user.auth.refresh)\n    yield put({\n      type: userConstants.REFRESH_SUCCESS,\n      user\n    })\n  } catch (e) {\n    yield put({\n      type: userConstants.REFRESH_FAILURE,\n      error: e.toString()\n    })\n  }\n}\n\nexport function * watchAuthExpiry () {\n  const user = JSON.parse(localStorage.getItem('user'))\n  if(user && user.auth && user.auth.access) {\n    yield call(refreshToken, {user})\n  }\n  yield takeEvery([userConstants.LOGIN_SUCCESS, userConstants.REFRESH_SUCCESS], refreshToken)\n}\n","import { watchAnalysisSubmission } from './checkAnalysisStatus.saga'\nimport { all } from 'redux-saga/effects'\nimport { watchAuthExpiry } from './jwt.saga'\n\nexport default function * rootSaga () {\n  yield all([\n    watchAnalysisSubmission(),\n    watchAuthExpiry()\n  ])\n}\n","import { applyMiddleware, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../_reducers'\nimport rootSaga from '../_sagas'\nimport thunkMiddleware from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\n\nconst loggerMiddleware = createLogger()\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(\n    loggerMiddleware,\n    thunkMiddleware,\n    sagaMiddleware,\n  )\n)\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react'\nimport config from '../config/config'\nimport { connect } from 'react-redux'\nimport { analysisActions } from '../_actions'\nimport EventListener from 'react-event-listener'\n\nclass MythXVerification extends React.Component {\n\n  handleMessage = (event) => {\n    // Only accept trusted origins\n    if (config.Remix.trustedOrigins.indexOf(event.origin) === -1) {\n      return\n    }\n    const {action, key, type, value} = JSON.parse(event.data)\n    if (action === 'notification' && key === 'compiler' && type === 'compilationFinished' && value[0]) {\n      //compilation successful submit for analysation\n      this.props.dispatch(analysisActions.analyzeContracts(value[1].contracts, value[2].sources))\n    }\n  }\n\n  renderIssues (issues) {\n    if (issues) {\n      issues = issues[0]\n    }\n    const issueList = []\n    for (const issue of issues.issues) {\n      for (const location of issue.locations) {\n        if (location.sourceList) {\n          for (const sourceFile of location.sourceList) {\n            issueList.push({\n              title: issue.description.head,\n              severity: issue.severity,\n              description: issue.description.tail,\n              lineColumnPos: location.sourceMap,\n              filePath: sourceFile,\n\n            })\n          }\n        } else {\n          issueList.push({\n            title: issue.description.head,\n            severity: issue.severity,\n            description: issue.description.tail,\n            lineColumnPos: location.sourceMap,\n            filePath: issues.sourceList[0]\n          })\n        }\n\n      }\n    }\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Issue</th>\n            <th>Location</th>\n            <th>Severity</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            issueList.map((issue) => {\n              return (\n                <tr key={issue.title + issue.filePath + issue.lineColumnPos}>\n                  <td>{issue.title}</td>\n                  <td>{issue.filePath}:{issue.lineColumnPos}</td>\n                  <td>{issue.severity}</td>\n                  <td>{issue.description}</td>\n                </tr>\n              )\n            })\n          }\n        </tbody>\n\n      </table>\n    )\n  }\n\n  render () {\n    if (!this.props.isLoggedIn) return null\n    let message = null\n    if (this.props.isSubmitting) {\n      message = 'Submitting compilation result to MythX analysis...'\n    }\n    if (this.props.isRequestingReport) {\n      message = 'Waiting for analysis report...'\n    }\n    if (message) {\n      message = (<p>{message}</p>)\n    }\n    return (\n      <EventListener\n        target=\"window\"\n        onMessage={this.handleMessage}\n      >\n        {message}\n\n        {\n          Object.keys(this.props.reports).map((uuid) => {\n            return (\n              <section key={uuid}>\n                <hr/>\n                <h3>Report id: {uuid}</h3>\n                {this.renderIssues(this.props.reports[uuid])}\n              </section>\n            )\n          })\n        }\n\n\n      </EventListener>\n    )\n  }\n\n}\n\nfunction mapStateToProps (state) {\n  const {authentication, analysis} = state\n  return {\n    isLoggedIn: authentication.loggedIn,\n    isSubmitting: analysis.isSubmitting,\n    isRequestingReport: analysis.isRequestingReport,\n    reports: analysis.reports\n  }\n}\n\nconst connectedMythixVerification = connect(mapStateToProps)(MythXVerification)\nexport { connectedMythixVerification as MythXVerification }\n","import React, { Component } from 'react'\nimport './App.css'\nimport { MythxLogin } from './Login/MythXLogin'\nimport { Provider } from 'react-redux'\nimport { store } from './_helpers/store'\nimport { MythXVerification } from './Verification/MythXVerification'\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <h1>MythX Security Verification</h1>\n          <MythxLogin/>\n          <MythXVerification/>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}